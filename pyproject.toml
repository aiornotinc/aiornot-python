[project]
name = "aiornot"
version = "0.0.5"
description = "Python client for the AIORNOT API."
readme = "README.md"
authors = [
    { name = "aiornot", email = "support@aiornot.com" }
]
requires-python = ">=3.9"
license = { text = "MIT" }
keywords = ["ai detection", "aiornot", "generative ai", "genai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "httpx>=0.25.1",
    "pydantic>=2.5.2",
    "aiofiles>=23.2.1",
    "click>=8.1.7",
]

[project.urls]
Homepage = "https://aiornot.com/"
Repository = "https://github.com/aiornotinc/aiornot-python"
"Bug Tracker" = "https://github.com/aiornotinc/aiornot-python/issues"
Documentation = "https://github.com/aiornotinc/aiornot-python"

[project.scripts]
aiornot = "aiornot.cli:cli"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "pytest>=7.4.3",
    "ruff>=0.1.6",
    "coverage>=7.3.2",
]

[tool.ruff.isort]
combine-as-imports = true
relative-imports-order = "closest-to-furthest"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.pep8-naming]
classmethod-decorators = ["classmethod", "pydantic.validator", "pydantic.root_validator"]

[[tool.mypy.overrides]]
module = [
    "pydantic.*",
    "httpx.*",
    "click.*",
]
ignore_missing_imports = true